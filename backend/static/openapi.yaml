openapi: 3.0.3
info:
  title: Backend Service for UKRIDA Portal System
  description: Backend Service with Flask and MongoDB
  contact:
    email: hendrik.tampubolon@ukrida.ac.id
  version: 1.0.11
servers:
  - url: "{protocol}://{serverip}:{port}/api/v1"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      serverip:
        default: 0.0.0.0
        description: server IP
      port:
        default: "5000"
        description: assigned port

tags:
  - name: User
    description: Endpoint for managing user
  - name: Courses
    description: Endpoint for managing courses
  - name: Billings 
    description: Endpoint for managing billings
  - name: Dashboard
    description: Endpoint for managing dashboard

paths:
  /user:
    post:
      tags:
        - User
      summary: Register User
      description: |
        Create user endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/user' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  id:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /login:
    post:
      tags:
        - User
      summary: Login Endpoint
      description: |
        login endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/login' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /courses:
    post:
      tags:
        - Courses
      summary: Add Course
      security:
        - BearerAuth: []
      description: |
        Create new course
        ```
        curl --location --request POST '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "kode_mk": "SIWP2005",
                "semester": "2",
                "nama_mk": "OOP",
                "sks": "6",
                "description": "OOP course"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    get:
      tags:
        - Courses
      summary: Get All Courses
      security:
        - BearerAuth: []
      description: |
        Get courses resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /courses/{course_id}:
    parameters:
      - name: course_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Courses
      summary: Get course by course ID
      security:
        - BearerAuth: []
      description: |
        Get course resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Courses
      summary: Delete Course By ID
      security:
        - BearerAuth: []
      description: |
        Delete Courses resource by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: Course successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist

    put:
      tags:
        - Courses
      summary: Edit Course
      security:
        - BearerAuth: []
      description: |
        Edit the details of Course
        ```
        curl --location --request PUT '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "kode_mk":"string",
                "nama_mk":"string" ,
                "semester": "string",
                "sks": 0,
                "description": "string"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"
      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /billings:
    post:
      tags:
        - Billings
      summary: Add Billings
      security:
        - BearerAuth: []
      description: |
        Create a new billing
        ```
        curl --location --request POST '`${url}`/api/v1/billings' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "nim": "422023022",
                "nama": "victorio",
                "tagihan": "jumlah tagihan",
                "date": "2024-06-26"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingPostRequestBody"
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    get:
      tags:
        - Billings
      summary: Get All Billings
      security:
        - BearerAuth: []
      description: |
        Get all billings
        ```
        curl --location --request GET '`${url}`/api/v1/billings' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BillingObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /billings/{billing_id}:
    parameters:
      - name: billing_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Billings
      summary: Get Billing by ID
      security:
        - BearerAuth: []
      description: |
        Get a specific billing by ID
        ```
        curl --location --request GET '`${url}`/api/v1/billings/{billing_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Billings
      summary: Delete Billing by ID
      security:
        - BearerAuth: []
      description: |
        Delete a specific billing by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/billings/{billing_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: Billing successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist

    put:
      tags:
        - Billings
      summary: Edit Billing
      security:
        - BearerAuth: []
      description: |
        Edit the details of a billing
        ```
        curl --location --request PUT '`${url}`/api/v1/billings/{billing_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "nim": " Updated nim",
                "nama": "Updated nama",
                "tagihan": "Updated jumlah tagihan",
                "date": "2024-06-26"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingPostRequestBody"
      responses:
        "200":
          description: "Edit Billing Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /dashboard:
    post:
      tags:
        - Dashboard
      summary: Add Dashboard Data
      security:
        - BearerAuth: []
      description: |
        Create new dashboard data
        ```
        curl --location --request POST '`${url}`/api/v1/dashboard' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
              "nim": "422023022",
              "nama": "victorio",
              "IPK": "3.75",
              "totaltagihan": "jumlah tagihan",
              "schedule": "2024-06-26"
          }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardPostRequestBody"
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    get:
      tags:
        - Dashboard
      summary: Get All Dashboard Data
      security:
        - BearerAuth: []
      description: |
        Get all dashboard data
        ```
        curl --location --request GET '`${url}`/api/v1/dashboard' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DashboardObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"



  /dashboard/{dashboard_id}:
    parameters:
      - name: dashboard_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Dashboard
      summary: Get Dashboard Data by ID
      security:
        - BearerAuth: []
      description: |
        Get specific dashboard data by ID
        ```
        curl --location --request GET '`${url}`/api/v1/dashboard/{dashboard_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Dashboard
      summary: Delete Dashboard Data by ID
      security:
        - BearerAuth: []
      description: |
        Delete specific dashboard data by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/dashboard/{dashboard_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: Dashboard data successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Resource not exist

    put:
      tags:
        - Dashboard
      summary: Edit Dashboard Data
      security:
        - BearerAuth: []
      description: |
        Edit details of a dashboard data
        ```
        curl --location --request PUT '`${url}`/api/v1/dashboard/{dashboard_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "nim": " Updated nim",
                "nama": "Updated nama",
                "IPK": 3.85,
                "totaltagihan": "Updated jumlah tagihan",
                "schedule": "2024-06-26"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardPostRequestBody"
      responses:
        "200":
          description: "Edit Dashboard Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

components:
  schemas:
    CourseObject:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        id:
          description: course id
          type: string
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string
        user:
          description: user own the resource
          type: object
          properties:
            id:
              description: user ID
              type: string
            name:
              description: user name
              type: string

    CoursePostRequestBody:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string
          
    BillingPostRequestBody:
      type: object
      properties:
        nim:
          type: integer
          example: "422023022"
        nama:
          type: string
          example: "victorio"
        tagihan:
          type: integer
          example: "5000000"
        date:
          type: string
          format: date
          example: "2024-06-26"

    BillingObject:
      type: object
      properties:
        id:
          type: string
          example: "01"
        nim:
          type: integer
          example: "422023022"
        nama:
          type: string
          example: "victorio"
        tagihan:
          type: integer
          example: "5000000"
        date:
          type: string
          format: date
          example: "2024-06-26"
    
    DashboardObject:
      type: object
      required:
        - nim
        - nama
        - IPK
        - totaltagihan
        - schedule
      properties:
        id:
          type: string
          description: dashboard data ID
        nim:
          type: integer
          example: "422023022"
          description: student's NIM
        nama:
          type: string
          example: "victorio"
          description: student's name
        IPK:
          type: string
          example: "3.75"
          description: student's IPK (Index Prestasi Kumulatif)
        totaltagihan:
          type: integer
          example: "5000000"
          description: total billing amount
        schedule:
          type: string
          format: date
          example: "2024-06-26"
          description:  schedule

    DashboardPostRequestBody:
      type: object
      required:
        - nim
        - nama
        - IPK
        - totaltagihan
        - schedule
      properties:
        nim:
          type: integer
          example: "422023022"
          description: student's NIM
        nama:
          type: string
          example: "victorio"
          description: student's name
        IPK:
          type: string
          example: "3.75"
          description: student's IPK (Index Prestasi Kumulatif)
        totaltagihan:
          type: integer
          example: "5000000"
          description: total billing amount
        schedule:
          type: string
          format: date
          example: "2024-06-26"
          description:  schedule

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

openapi: 3.0.3
info:
  title: Backend Service for UKRIDA Portal System
  description: |-
    Backend Service with Flask and MongoDB
  contact:
    email: hendrik.tampubolon@ukrida.ac.id
  version: 1.0.11
servers:
  - url: "{protocol}://{serverip}:{port}/api/v1"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      serverip:
        default: 0.0.0.0
        description: server IP
      port:
        default: "5000"
        description: assigned port

tags:
  - name: User
    description: Endpoint for managing user
  - name: Courses
    description: Endpoint for managing courses
  - name: Bulletins
    description: Endpoint for managing bulletins
  - name: Classes
    description: Endpoint for managing classes

paths:
  /user:
    post:
      tags:
        - User
      summary: Register User
      description: |
        Create user endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/user' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  id:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /login:
    post:
      tags:
        - User
      summary: Login Endpoint
      description: |
        login endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/login' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  # courses
  /courses:
    post:
      tags:
        - Courses
      summary: Add Course
      security:
        - BearerAuth: []
      description: |
        Create new course
        ```
        curl --location --request POST '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "kode_mk": "SIWP2005",
                "semester": "2",
                "nama_mk": "OOP",
                "sks": "6",
                "description": "OOP course"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    get:
      tags:
        - Courses
      summary: Get All Courses
      security:
        - BearerAuth: []
      description: |
        Get courses resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /courses/{course_id}:
    parameters:
      - name: course_id
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get course by course ID
      security:
        - BearerAuth: []
      description: |
        Get course resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Courses
      summary: Delete Course By ID
      security:
        - BearerAuth: []
      description: |
        Delete Courses resource by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Course successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist
    put:
      tags:
        - Courses
      summary: "Edit Course"
      security:
        - BearerAuth: []
      description: |
        Edit the details of Course
        ```
        curl --location --request PUT '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "kode_mk":"string",
                "nama_mk":"string" ,
                "semester": "string",
                "sks": 0,
                "description": "string"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  # bulletins
  /bulletins:
    post:
      tags:
        - Bulletins
      summary: Add Bulletin
      security:
        - BearerAuth: []
      description: |
        Create a new bulletin
        ```
        curl --location --request POST '`${url}`/api/v1/bulletins' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "title": "Bulletin Title",
                "content": "Content of the bulletin",
                "author": "Author Name",
                "date": "2024-06-26"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulletinPostRequestBody"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulletinObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    get:
      tags:
        - Bulletins
      summary: Get All Bulletins
      security:
        - BearerAuth: []
      description: |
        Get all bulletins
        ```
        curl --location --request GET '`${url}`/api/v1/bulletins' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BulletinObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /bulletins/{bulletin_id}:
    parameters:
      - name: bulletin_id
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Bulletins
      summary: Get Bulletin by ID
      security:
        - BearerAuth: []
      description: |
        Get a specific bulletin by ID
        ```
        curl --location --request GET '`${url}`/api/v1/bulletins/{bulletin_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulletinObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Bulletins
      summary: Delete Bulletin by ID
      security:
        - BearerAuth: []
      description: |
        Delete a specific bulletin by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/bulletins/{bulletin_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
        ```
      responses:
        "200":
          description: Bulletin successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist
    put:
      tags:
        - Bulletins
      summary: Edit Bulletin
      security:
        - BearerAuth: []
      description: |
        Edit the details of a bulletin
        ```
        curl --location --request PUT '`${url}`/api/v1/bulletins/{bulletin_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN}' \
            --data-raw '{
                "title": "Updated Title",
                "content": "Updated content",
                "author": "Updated Author",
                "date": "2024-06-27"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulletinPostRequestBody"

      responses:
        "200":
          description: "Edit Bulletin Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulletinObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  # classes
  /classes:
      post:
        tags:
          - Classes
        summary: Add Class
        security:
          - BearerAuth: []
        description: |
          Create a new class
          ```
          curl --location --request POST '`${url}`/api/v1/classes' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer {TOKEN}' \
              --data-raw '{
                  "kode_mk": "Class code",
                  "course": "Course of the class",
                  "type": "Type of the class",
                  "sks": "Total sks",
                  "date": "2024-06-26",
                  "room": "Room of the class",
                  "lecture": "Lecture of the class"
              }'
          ```
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassesPostRequestBody"

        responses:
          "200":
            description: "Success response"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClassesObject"

          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: "error description"
                      example: "Server Error"
      get:
        tags:
          - Classes
        summary: Get All Classes
        security:
          - BearerAuth: []
        description: |
          Get all classes
          ```
          curl --location --request GET '`${url}`/api/v1/classes' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer {TOKEN}' \
          ```
        responses:
          "200":
            description: "Success response"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/ClassesObject"
          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: "error description"
                      example: "Server Error"

  /classes/{classes_id}:
      parameters:
        - name: classes_id
          in: path
          required: true
          schema:
            type: string

      get:
        tags:
          - Classes
        summary: Get Classes by ID
        security:
          - BearerAuth: []
        description: |
          Get a specific class by ID
          ```
          curl --location --request GET '`${url}`/api/v1/classes/{classes_id}' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer {TOKEN}' \
          ```
        responses:
          "200":
            description: "Success response"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClassesObject"

          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: "error description"
                      example: "Server Error"

      delete:
        tags:
          - Classes
        summary: Delete Classes by ID
        security:
          - BearerAuth: []
        description: |
          Delete a specific class by ID
          ```
          curl --location --request DELETE '`${url}`/api/v1/classes/{classes_id}' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer {TOKEN}' \
          ```
        responses:
          "200":
            description: Class successfully deleted
            content:
              text/plain:
                schema:
                  type: string
                  example: Success

          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                example:
                  message: Resource not exist
      put:
        tags:
          - Classes
        summary: Edit Class
        security:
          - BearerAuth: []
        description: |
          Edit the details of a class
          ```
          curl --location --request PUT '`${url}`/api/v1/classes/{classes_id}' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer {TOKEN}' \
              --data-raw '{
                  "kode_mk": "Class code",
                  "course": "Course of the class",
                  "type": "Type of the class",
                  "sks": "Total sks",
                  "date": "2024-06-26",
                  "room": "Room of the class",
                  "lecture": "Lecture of the class"
              }'
          ```
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassesPostRequestBody"

        responses:
          "200":
            description: "Edit Class Success response"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClassesObject"

          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: "error description"
                      example: "Server Error"

components:
  schemas:
    CourseObject:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        id:
          description: course id
          type: string
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string

        user:
          description: user own the resource
          type: object
          properties:
            id:
              description: user ID
              type: string
            name:
              description: user name
              type: string
    CoursePostRequestBody:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string
    BulletinPostRequestBody:
      type: object
      required:
        - title
        - content
        - author
      properties:
        title:
          type: string
          example: "Bulletin Title"
        content:
          type: string
          example: "Content of the bulletin"
        author:
          type: string
          example: "Author Name"
        date:
          type: string
          format: date
          example: "2024-06-26"
    BulletinObject:
      type: object
      required:
        - title
        - content
        - author
      properties:
        id:
          type: string
          example: "1234567890"
        title:
          type: string
          example: "Bulletin Title"
        content:
          type: string
          example: "Content of the bulletin"
        author:
          type: string
          example: "Author Name"
        date:
          type: string
          format: date
          example: "2024-06-26"
    ClassesPostRequestBody:
      type: object
      required:
        - kode_mk
        - course
        - type
        - sks
        - date
        - lecture
      properties:
        kode_mk:
          type: string
          example: "Class code"
        course:
          type: string
          example: "Course of the class"
        type:
          type: string
          example: "Type of the class"
        sks:
          type: integer
          example: "Total sks"
        date:
          type: string
          format: datetime
          example: "2024-06-27 10:00"
        room:
          type: string
          example: "Room of the class"
        online_class:
          type: string
          example: "Online class link"
        lecture:
          type: string
          example: "Lecture of the class"
    ClassesObject:
      type: object
      required:
        - kode_mk
        - course
        - type
        - sks
        - date
        - lecture
      properties:
        id:
          type: string
          example: "1234567890"
        kode_mk:
          type: string
          example: "Class code"
        course:
          type: string
          example: "Course of the class"
        type:
          type: string
          example: "Type of the class"
        sks:
          type: integer
          example: "Total sks"
        date:
          type: string
          format: datetime
          example: "2024-06-27 10:00"
        room:
          type: string
          example: "Room of the class"
        online_class:
          type: string
          example: "Online class link"
        lecture:
          type: string
          example: "Lecture of the class"

  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
